window.addEventListener("DOMContentLoaded", () => { const finalHop = document.querySelector("#final-hop"); const finalHopLink = document.querySelector("#final-hop a"); finalHopLink.removeAttribute("href"); const removedParamsSpan = document.querySelector("#removed-params"); if (finalHop) { const url = finalHop.querySelector("a").textContent; const lastSlashIndex = url.lastIndexOf("/"); const baseUrl = url.substring(0, lastSlashIndex + 1); const removedParams = []; function extractParameters(url) { let goodParams = ""; let additionalText = ""; let anchorUrl = new URL(url); let anchor = anchorUrl.hash; const lastSlashIndex = url.lastIndexOf("/") + 1; const path = url.substring(lastSlashIndex); const segments = path.split(/[?&]/); for (const segment of segments) { const [key, value] = segment.split("="); if (key && value) { if (filterTheParams(key)) { goodParams += `&${key}=${value}` } else { additionalText += segment } } if (goodParams.slice(1).length > 0) { additionalText += "?" + goodParams.slice(1) } if (anchor) { additionalText += anchor } return additionalText } } function filterTheParams(param) { const badParts = ["_kx", "cid", "ck_subscriber_id", "cmpid", "ea.tracking.id", "fbclid", "gclid", "linkID", "mailId", "msclkid", "mc_cid", "mcID", "mc_eid"]; const isBadPart = badParts.includes(param) || param.startsWith("cm_") || param.startsWith("pk_") || param.startsWith("utm_"); if (isBadPart) { removedParams.push(param); return false } return true } let goodParamString = extractParameters(url); removedParams.sort(); if (removedParams.length > 0) { removedParamsSpan.textContent = removedParams.join(", ") } const sanitizedURL = DOMPurify.sanitize(url); const sanitizedURLNode = document.createTextNode(sanitizedURL); const spanElement = document.querySelector('.rawFinalUrl'); const strongElement = spanElement.querySelector('strong'); const textNode = strongElement.firstChild; spanElement.parentNode.insertBefore(sanitizedURLNode, spanElement.nextSibling); const anchorElement = document.createElement("a"); const encodedGoodParamString = encodeURIComponent(goodParamString); const newHref = baseUrl + encodedGoodParamString; const sanitizedHref = DOMPurify.sanitize(newHref); var fixedURL = sanitizedHref.replace(/%3F/g, '?'); fixedURL = fixedURL.replace(/%23/g, '#'); anchorElement.setAttribute("href", fixedURL); anchorElement.setAttribute("target", "_blank"); anchorElement.textContent = `${baseUrl}${goodParamString}`; finalHop.innerHTML = ""; finalHop.appendChild(anchorElement) } }); window.addEventListener("DOMContentLoaded", async () => { const tooltipContainers = document.querySelectorAll(".tooltip-container"); const httpStatusCodes = await fetchHttpStatusCodes(); async function fetchHttpStatusCodes() { try { const response = await fetch("static/data/http_status_codes.json"); const json = await response.json(); return json } catch (error) { console.error("Error fetching HTTP status codes:", error); return {} } } tooltipContainers.forEach((tooltipContainer) => { const statusButton = tooltipContainer.querySelector("#status-button"); const infoIcon = tooltipContainer.querySelector(".info-icon"); const tooltip = tooltipContainer.querySelector(".tooltip"); infoIcon.addEventListener("mouseover", (event) => { const statusCode = statusButton.textContent; const message = httpStatusCodes[statusCode]?.message; if (message) { tooltip.textContent = `Status: ${message}`; tooltip.style.visibility = "visible" } }); infoIcon.addEventListener("mouseout", (event) => { tooltip.style.visibility = "hidden" }) }) }); document.addEventListener('DOMContentLoaded', function () { var toggleButton = document.getElementById('toggleButton'); var rows = document.getElementsByClassName('result-info'); for (var i = 0; i < rows.length; i += 1) { rows[i].style.display = 'none' } toggleButton.addEventListener('click', function () { for (var i = 0; i < rows.length; i += 1) { if (rows[i].style.display === 'none') { rows[i].style.display = 'table-row' } else { rows[i].style.display = 'none' } } }) }); window.addEventListener("DOMContentLoaded", async () => { document.getElementById("downloadButton").addEventListener("click", function () { var rows = Array.from(document.querySelectorAll("#resultTable tbody tr:not(.result-info)")); var hops = []; rows.forEach(function (row) { var cells = row.getElementsByTagName("td"); var status = cells[1].textContent.trim(); var cleanStatus = status.replace(/\D/g, ''); var hop = { "Hop": cells[0].textContent.trim(), "Status": cleanStatus, "URL": cells[2].textContent.trim() }; hops.push(hop) }); var rawFinalURL = document.querySelector(".rawFinalUrl").nextSibling.textContent.trim(); console.log(rawFinalURL); var removedParams = document.getElementById("removed-params").textContent; var removedParamsArray = removedParams.split(',').map(function (param) { return param.trim() }); var meta = { "rawFinalURL": rawFinalURL || null, "removedParams": removedParamsArray || null }; var jsonData = { "Results": hops, "Meta": meta }; var jsonString = JSON.stringify(jsonData, null, 2); var element = document.createElement("a"); element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(jsonString)); element.setAttribute("download", "gotrace_data.json"); element.style.display = "none"; document.body.appendChild(element); element.click(); document.body.removeChild(element) }) });